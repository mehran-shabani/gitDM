/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * GITDM API
 * Description here.
 * OpenAPI spec version: 1.0.0
 */
/**
 * Serializer for AISummary model with enhanced fields
 */
export interface AISummary {
  readonly id: number;
  patient: number;
  /** @nullable */
  content_type?: number | null;
  /**
   * @maxLength 64
   * @nullable
   */
  object_id?: string | null;
  readonly resource_type: string;
  summary: string;
  readonly references: readonly string[];
  readonly created_at: string;
  readonly updated_at: string;
}

/**
 * Simplified serializer for listing AI summaries
 */
export interface AISummaryList {
  readonly id: number;
  patient: number;
  readonly resource_type: string;
  readonly summary_preview: string;
  readonly references_count: string;
  readonly created_at: string;
  readonly updated_at: string;
}

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlankEnum = {
  '': '',
} as const;

export interface ClinicalReference {
  readonly id: number;
  /** @maxLength 200 */
  title: string;
  /** @maxLength 120 */
  source: string;
  /**
   * @minimum 1900
   * @maximum 9223372036854776000
   */
  year: number;
  /** @maxLength 200 */
  url?: string;
  /** @maxLength 80 */
  topic: string;
}

/**
 * Serializer for creating AI summaries with content to be processed
 */
export interface CreateAISummary {
  patient_id: number;
  /** Raw medical content to be summarized by AI */
  content: string;
  /** Model name for generic relation (e.g., 'encounter', 'lab_result') */
  content_type_model?: string;
  /** Object ID for generic relation */
  object_id?: string;
  /** Optional patient context for better summarization */
  context?: string;
  /** Type of summary for specialized AI prompts

* `medical_record` - Medical Record
* `encounter` - Patient Encounter
* `lab_results` - Laboratory Results
* `medications` - Medications */
  summary_type?: SummaryTypeEnum;
  /** Topic hint for linking clinical references */
  topic_hint?: string;
  /** Process summary asynchronously using background task */
  async_processing?: boolean;
}

export interface Encounter {
  readonly id: number;
  patient: number;
  occurred_at: string;
  subjective?: string;
  objective?: unknown;
  assessment?: unknown;
  plan?: unknown;
  readonly created_by: number;
  readonly created_at: string;
}

/**
 * * `QD` - Once daily
* `BID` - Twice daily
* `TID` - Three times daily
* `QID` - Four times daily
* `Q6H` - Every 6 hours
* `Q8H` - Every 8 hours
* `Q12H` - Every 12 hours
* `PRN` - As needed
* `QW` - Weekly
* `QM` - Monthly
 */
export type FrequencyEnum = typeof FrequencyEnum[keyof typeof FrequencyEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FrequencyEnum = {
  QD: 'QD',
  BID: 'BID',
  TID: 'TID',
  QID: 'QID',
  Q6H: 'Q6H',
  Q8H: 'Q8H',
  Q12H: 'Q12H',
  PRN: 'PRN',
  QW: 'QW',
  QM: 'QM',
} as const;

export interface LabResult {
  readonly id: number;
  patient: number;
  /** @nullable */
  encounter?: number | null;
  /** @maxLength 40 */
  loinc: string;
  /** @pattern ^-?\d{0,6}(?:\.\d{0,4})?$ */
  value: string;
  /** @maxLength 16 */
  unit: string;
  taken_at: string;
}

export interface MedicationOrder {
  readonly id: number;
  patient: number;
  /** @nullable */
  encounter?: number | null;
  /**
   * ATC classification code (e.g., A10BA02 for Metformin)
   * @maxLength 20
   * @pattern ^[A-Z]\d{2}[A-Z]{1,2}\d{2}$
   */
  atc: string;
  /** @maxLength 100 */
  name: string;
  /** @maxLength 50 */
  dose: string;
  frequency?: FrequencyEnum;
  start_date: string;
  /** @nullable */
  end_date?: string | null;
}

export type NullEnum = typeof NullEnum[keyof typeof NullEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NullEnum = {
} as const;

/**
 * Serializer for AISummary model with enhanced fields
 */
export interface PatchedAISummary {
  readonly id?: number;
  patient?: number;
  /** @nullable */
  content_type?: number | null;
  /**
   * @maxLength 64
   * @nullable
   */
  object_id?: string | null;
  readonly resource_type?: string;
  summary?: string;
  readonly references?: readonly string[];
  readonly created_at?: string;
  readonly updated_at?: string;
}

export interface PatchedClinicalReference {
  readonly id?: number;
  /** @maxLength 200 */
  title?: string;
  /** @maxLength 120 */
  source?: string;
  /**
   * @minimum 1900
   * @maximum 9223372036854776000
   */
  year?: number;
  /** @maxLength 200 */
  url?: string;
  /** @maxLength 80 */
  topic?: string;
}

export interface PatchedEncounter {
  readonly id?: number;
  patient?: number;
  occurred_at?: string;
  subjective?: string;
  objective?: unknown;
  assessment?: unknown;
  plan?: unknown;
  readonly created_by?: number;
  readonly created_at?: string;
}

export interface PatchedLabResult {
  readonly id?: number;
  patient?: number;
  /** @nullable */
  encounter?: number | null;
  /** @maxLength 40 */
  loinc?: string;
  /** @pattern ^-?\d{0,6}(?:\.\d{0,4})?$ */
  value?: string;
  /** @maxLength 16 */
  unit?: string;
  taken_at?: string;
}

export interface PatchedMedicationOrder {
  readonly id?: number;
  patient?: number;
  /** @nullable */
  encounter?: number | null;
  /**
   * ATC classification code (e.g., A10BA02 for Metformin)
   * @maxLength 20
   * @pattern ^[A-Z]\d{2}[A-Z]{1,2}\d{2}$
   */
  atc?: string;
  /** @maxLength 100 */
  name?: string;
  /** @maxLength 50 */
  dose?: string;
  frequency?: FrequencyEnum;
  start_date?: string;
  /** @nullable */
  end_date?: string | null;
}

export interface PatchedPatient {
  readonly id?: number;
  /** @nullable */
  user?: number | null;
  /**
   * @maxLength 20
   * @nullable
   */
  national_id?: string | null;
  /** @maxLength 120 */
  full_name?: string;
  /** @nullable */
  dob?: string | null;
  /** @nullable */
  sex?: string | null;
  /** @nullable */
  primary_doctor?: number | null;
  readonly primary_doctor_id?: number;
  readonly created_at?: string;
}

export interface Patient {
  readonly id: number;
  /** @nullable */
  user?: number | null;
  /**
   * @maxLength 20
   * @nullable
   */
  national_id?: string | null;
  /** @maxLength 120 */
  full_name?: string;
  /** @nullable */
  dob?: string | null;
  /** @nullable */
  sex?: string | null;
  /** @nullable */
  primary_doctor?: number | null;
  readonly primary_doctor_id: number;
  readonly created_at: string;
}

/**
 * Serializer for regenerating existing AI summaries
 */
export interface RegenerateAISummary {
  summary_id: string;
  /** New content to summarize */
  content: string;
  /** Optional patient context */
  context?: string;
  summary_type?: SummaryTypeEnum;
}

/**
 * * `MALE` - Male
* `FEMALE` - Female
* `OTHER` - Other
 */
export type SexEnum = typeof SexEnum[keyof typeof SexEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SexEnum = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
} as const;

/**
 * * `medical_record` - Medical Record
* `encounter` - Patient Encounter
* `lab_results` - Laboratory Results
* `medications` - Medications
 */
export type SummaryTypeEnum = typeof SummaryTypeEnum[keyof typeof SummaryTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SummaryTypeEnum = {
  medical_record: 'medical_record',
  encounter: 'encounter',
  lab_results: 'lab_results',
  medications: 'medications',
} as const;

export interface TokenObtainPair {
  email: string;
  password: string;
  readonly access: string;
  readonly refresh: string;
}

export interface TokenRefresh {
  readonly access: string;
  refresh: string;
}

